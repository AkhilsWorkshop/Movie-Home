{"version":3,"file":"static/js/733.43319547.chunk.js","mappings":"mOA8GA,UAtGoB,SAAC,GAA6B,IAA3BA,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SAExBC,EAAa,yCAAG,kGAEA,WAAdF,EAFc,gCAGSG,IAAAA,IAAA,uCAA0CH,EAA1C,YAAuDC,EAAvD,qCAA4FG,qCAHrG,gBAGNC,EAHM,EAGNA,KACRC,EAAeD,EAAKE,MAJN,wCAQSJ,IAAAA,IAAA,uCAA0CH,EAA1C,YAAuDC,EAAvD,4BAAmFG,qCAR5F,iBAQNC,EARM,EAQNA,KACRC,EAAeD,EAAKE,MATN,4CAAH,qDAanB,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBH,EAApB,KAEA,GAA8BE,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KAQA,OANAC,EAAAA,EAAAA,YAAU,WACND,GAAW,GACXT,IACAW,YAAW,WAAQF,GAAW,EAAQ,GAAE,IAC3C,GAAE,KAGC,gBAAKG,UAAU,sBAAf,SAEKL,EAAYM,OAAS,IAClB,iCACI,eAAID,UAAU,oEAAd,SAEmB,WAAdd,GAAyB,6CAAiB,0CAI/C,SAAC,UAAD,CACIgB,oBAAqB,EACrBC,QAAM,EACNC,UAAQ,EACRC,cAAe,IACfC,YAAY,EACZN,UAAU,2CACVO,WAAS,EACTC,eAAe,EACfC,UAAU,EACVC,UAAU,GACVC,iBAAkB,GAClBC,cAAY,EACZC,0BAA0B,EAC1BC,0BAA0B,EAC1BC,mBAAmB,EACnBC,WAAYA,EAAAA,GACZC,QAAM,EACNC,qBAAqB,EACrBC,KAAK,EACLC,qBAAmB,EACnBC,UAAU,EACVC,YAAY,GACZC,cAAe,EACfC,WAAS,EACTC,mBAAoB,IAzBxB,gBA4BK9B,QA5BL,IA4BKA,OA5BL,EA4BKA,EAAa+B,KAAI,SAACC,GACf,OAA8D,OAAtDA,EAAWC,aAAeD,EAAWE,gBAGzCjC,GAEI,SAAC,IAAD,KAIA,iBAAKI,UAAU,6CAAf,WACI,gBAAKA,UAAU,uCAAf,UACI,SAAC,IAAD,CAAQ8B,WAAYH,EAAWG,YAAc,SAAUC,GAAIJ,EAAWI,GAAtE,UACI,gBACIC,IAAKC,EAAAA,IAAeN,EAAWC,aAAeD,EAAWE,cACzDK,IAAI,eACJlC,UAAU,iIACVJ,QAAQ,cAIpB,cAAGI,UAAU,oCAAb,SAA4D,OAAV2B,QAAU,IAAVA,GAAAA,EAAYQ,UAAYR,EAAWQ,UAAY,aACjG,cAAGnC,UAAU,sBAAb,SAAqC2B,EAAWS,OAAWT,EAAWU,eAAmBV,EAAWW,UAKnH,UASxB,C","sources":["components/Cards/DetailedCard/ScrollCard1.jsx"],"sourcesContent":["import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { halfSizeImg, responsive } from '../../../config/config'\r\nimport LScrollCard from '../../LazyLoading/LScrollCard'\r\nimport Button from '../../Sub/Button'\r\nimport Carousel from 'react-multi-carousel'\r\nimport 'react-multi-carousel/lib/styles.css';\r\n\r\nconst ScrollCard1 = ({ mediaType, searchID }) => {\r\n\r\n    const fetchCredits1 = async () => {\r\n\r\n        if (mediaType === \"person\") {\r\n            const { data } = await axios.get(`https://api.themoviedb.org/3/${mediaType}/${searchID}/combined_credits?api_key=${process.env.REACT_APP_API_KEY}`)\r\n            setFirstScroll(data.cast)\r\n        }\r\n\r\n        else {\r\n            const { data } = await axios.get(`https://api.themoviedb.org/3/${mediaType}/${searchID}/credits?api_key=${process.env.REACT_APP_API_KEY}`)\r\n            setFirstScroll(data.cast)\r\n        }\r\n    }\r\n\r\n    const [firstScroll, setFirstScroll] = useState([]);\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        fetchCredits1()\r\n        setTimeout(() => { setLoading(false) }, 1000)\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"flex flex-col gap-5\">\r\n\r\n            {firstScroll.length > 0 &&\r\n                <>\r\n                    <h1 className=\"border-l-4 pl-2 border-yellow-500 text-lg md:text-2xl sm:text-4xl\">\r\n\r\n                        {mediaType === \"person\" ? <>Known for</> : <>Cast</>}\r\n\r\n                    </h1>\r\n\r\n                    <Carousel\r\n                        additionalTransfrom={0}\r\n                        arrows\r\n                        autoPlay\r\n                        autoPlaySpeed={5000}\r\n                        centerMode={false}\r\n                        className=\"hover:cursor-grab active:cursor-grabbing\"\r\n                        draggable\r\n                        focusOnSelect={false}\r\n                        infinite={false}\r\n                        itemClass=\"\"\r\n                        minimumTouchDrag={80}\r\n                        pauseOnHover\r\n                        renderArrowsWhenDisabled={false}\r\n                        renderButtonGroupOutside={true}\r\n                        renderDotsOutside={false}\r\n                        responsive={responsive}\r\n                        rewind\r\n                        rewindWithAnimation={true}\r\n                        rtl={false}\r\n                        shouldResetAutoplay\r\n                        showDots={false}\r\n                        sliderClass=\"\"\r\n                        slidesToSlide={2}\r\n                        swipeable\r\n                        transitionDuration={500}\r\n                    >\r\n\r\n                        {firstScroll?.map((eachPerson) => {\r\n                            return (eachPerson.poster_path || eachPerson.profile_path) != null && (\r\n\r\n\r\n                                loading ?\r\n\r\n                                    <LScrollCard />\r\n\r\n                                    :\r\n\r\n                                    <div className=\"flex flex-col h-auto w-24 rounded-md gap-2\">\r\n                                        <div className=\"h-36 w-24 rounded-md overflow-hidden\">\r\n                                            <Button media_type={eachPerson.media_type || \"person\"} id={eachPerson.id}>\r\n                                                <img\r\n                                                    src={halfSizeImg + (eachPerson.poster_path || eachPerson.profile_path)}\r\n                                                    alt=\"Refresh Page\"\r\n                                                    className=\"object-fill h-36 rounded-md shadow-lg shadow-black duration-150 sm:hover:rounded-none sm:hover:scale-105 sm:hover:saturate-150\"\r\n                                                    loading=\"lazy\"\r\n                                                />\r\n                                            </Button>\r\n                                        </div>\r\n                                        <p className=\"truncate sm:text-sm text-gray-400\">{eachPerson?.character ? eachPerson.character : \"Unknown\"}</p>\r\n                                        <p className=\"truncate sm:text-sm\">{(eachPerson.title) || (eachPerson.original_name) || (eachPerson.name)}</p>\r\n\r\n                                    </div>\r\n\r\n                            )\r\n                        })}\r\n\r\n\r\n\r\n                    </Carousel>\r\n                </>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ScrollCard1"],"names":["mediaType","searchID","fetchCredits1","axios","process","data","setFirstScroll","cast","useState","firstScroll","loading","setLoading","useEffect","setTimeout","className","length","additionalTransfrom","arrows","autoPlay","autoPlaySpeed","centerMode","draggable","focusOnSelect","infinite","itemClass","minimumTouchDrag","pauseOnHover","renderArrowsWhenDisabled","renderButtonGroupOutside","renderDotsOutside","responsive","rewind","rewindWithAnimation","rtl","shouldResetAutoplay","showDots","sliderClass","slidesToSlide","swipeable","transitionDuration","map","eachPerson","poster_path","profile_path","media_type","id","src","halfSizeImg","alt","character","title","original_name","name"],"sourceRoot":""}