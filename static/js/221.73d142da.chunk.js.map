{"version":3,"file":"static/js/221.73d142da.chunk.js","mappings":"mOAgHA,UAzGoB,SAAC,GAA6B,IAA3BA,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SAExBC,EAAa,yCAAG,kGAEA,WAAdF,EAFc,gCAGSG,IAAAA,IAAA,uCAA0CH,EAA1C,YAAuDC,EAAvD,qCAA4FG,qCAHrG,gBAGNC,EAHM,EAGNA,KACRC,EAAgBD,EAAKE,MAJP,wCAQSJ,IAAAA,IAAA,uCAA0CH,EAA1C,YAAuDC,EAAvD,4BAAmFG,qCAR5F,iBAQNC,EARM,EAQNA,KACRC,EAAgBD,EAAKE,MATP,4CAAH,qDAanB,GAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBH,EAArB,KAEA,GAA8BE,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,MAEAC,EAAAA,EAAAA,YAAU,WACND,GAAW,GACXT,IACAW,YAAW,WAAQF,GAAW,EAAQ,GAAE,KACxCG,QAAQC,IAAIN,EACf,GAAE,IAEH,IAAMO,GAAkB,OAAO,IAAIC,IAAJ,OAAQR,QAAR,IAAQA,OAAR,EAAQA,EAAcS,KAAI,SAACC,GAAD,MAAO,CAACA,EAAEC,KAAMD,EAAhB,KAAqBE,UAE9E,OACI,gBAAMC,UAAU,wCAAhB,SAEKN,EAAmBO,OAAS,IAEzB,iCACI,eAAID,UAAU,oEAAd,SAEmB,WAAdtB,GAAyB,6CAAiB,0CAI/C,SAAC,UAAD,CACIwB,oBAAqB,EACrBC,QAAM,EACNC,UAAU,EACVC,YAAY,EACZL,UAAU,2CACVM,WAAS,EACTC,eAAe,EACfC,UAAU,EACVC,UAAU,GACVC,iBAAkB,GAClBC,cAAY,EACZC,0BAA0B,EAC1BC,0BAA0B,EAC1BC,mBAAmB,EACnBC,WAAYA,EAAAA,GACZC,QAAM,EACNC,qBAAqB,EACrBC,KAAK,EACLC,qBAAmB,EACnBC,UAAU,EACVC,YAAY,GACZC,cAAe,EACfC,WAAS,EACTC,mBAAoB,IAxBxB,gBA2BK9B,QA3BL,IA2BKA,OA3BL,EA2BKA,EAAoBE,KAAI,SAAC6B,GACtB,OAA8D,OAAtDA,EAAWC,aAAeD,EAAWE,gBAGzCvC,GAEI,SAAC,IAAD,KAIA,iBAAKY,UAAU,6CAAf,WACI,gBAAKA,UAAU,uCAAf,UACI,SAAC,IAAD,CAAQ4B,WAAYH,EAAWG,YAAc,SAAUC,GAAIJ,EAAWI,GAAtE,UACI,gBACIC,IAAKC,EAAAA,IAAeN,EAAWC,aAAeD,EAAWE,cACzDK,IAAI,eACJhC,UAAU,uIACVZ,QAAQ,cAIpB,cAAGY,UAAU,oCAAb,UAA4D,OAAVyB,QAAU,IAAVA,OAAA,EAAAA,EAAYQ,OAAZ,OAAmBR,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAY3B,SACjF,cAAGE,UAAU,sBAAb,SAAoCyB,EAAWS,QAAX,OAAoBT,QAApB,IAAoBA,OAApB,EAAoBA,EAAYU,iBAAhC,OAAiDV,QAAjD,IAAiDA,OAAjD,EAAiDA,EAAYW,0BAIhH,UAUxB,C","sources":["components/Cards/DetailedCard/ScrollCard2.jsx"],"sourcesContent":["import axios from \"axios\"\r\nimport { useState, useEffect } from \"react\"\r\nimport { halfSizeImg, responsive } from \"../../../config/config\"\r\nimport Button from \"../../Sub/Button\"\r\nimport LScrollCard from \"../../LazyLoading/LScrollCard\"\r\nimport Carousel from \"react-multi-carousel\"\r\n\r\nconst ScrollCard2 = ({ mediaType, searchID }) => {\r\n\r\n    const fetchCredits2 = async () => {\r\n\r\n        if (mediaType === \"person\") {\r\n            const { data } = await axios.get(`https://api.themoviedb.org/3/${mediaType}/${searchID}/combined_credits?api_key=${process.env.REACT_APP_API_KEY}`)\r\n            setSecondScroll(data.crew)\r\n        }\r\n\r\n        else {\r\n            const { data } = await axios.get(`https://api.themoviedb.org/3/${mediaType}/${searchID}/credits?api_key=${process.env.REACT_APP_API_KEY}`)\r\n            setSecondScroll(data.crew)\r\n        }\r\n    }\r\n\r\n    const [secondScroll, setSecondScroll] = useState([]);\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        fetchCredits2()\r\n        setTimeout(() => { setLoading(false) }, 1000)\r\n        console.log(secondScroll)\r\n    }, [])\r\n\r\n    const uniqueSecondScroll = [...new Map(secondScroll?.map((m) => [m.name, m])).values()];\r\n\r\n    return (\r\n        < div className=\"flex flex-col overflow-x-hidden gap-5\" >\r\n\r\n            {uniqueSecondScroll.length > 0 &&\r\n\r\n                <>\r\n                    <h1 className=\"border-l-4 pl-2 border-yellow-500 text-lg md:text-2xl sm:text-4xl\">\r\n\r\n                        {mediaType === \"person\" ? <>Worked as</> : <>Crew</>}\r\n\r\n                    </h1>\r\n\r\n                    <Carousel\r\n                        additionalTransfrom={0}\r\n                        arrows\r\n                        autoPlay={false}\r\n                        centerMode={false}\r\n                        className=\"hover:cursor-grab active:cursor-grabbing\"\r\n                        draggable\r\n                        focusOnSelect={false}\r\n                        infinite={false}\r\n                        itemClass=\"\"\r\n                        minimumTouchDrag={80}\r\n                        pauseOnHover\r\n                        renderArrowsWhenDisabled={false}\r\n                        renderButtonGroupOutside={true}\r\n                        renderDotsOutside={false}\r\n                        responsive={responsive}\r\n                        rewind\r\n                        rewindWithAnimation={false}\r\n                        rtl={false}\r\n                        shouldResetAutoplay\r\n                        showDots={false}\r\n                        sliderClass=\"\"\r\n                        slidesToSlide={2}\r\n                        swipeable\r\n                        transitionDuration={500}\r\n                    >\r\n\r\n                        {uniqueSecondScroll?.map((eachPerson) => {\r\n                            return (eachPerson.poster_path || eachPerson.profile_path) != null && (\r\n\r\n\r\n                                loading ?\r\n\r\n                                    <LScrollCard />\r\n\r\n                                    :\r\n\r\n                                    <div className=\"flex flex-col h-auto w-24 rounded-md gap-2\">\r\n                                        <div className=\"h-36 w-24 rounded-md overflow-hidden\">\r\n                                            <Button media_type={eachPerson.media_type || \"person\"} id={eachPerson.id}>\r\n                                                <img\r\n                                                    src={halfSizeImg + (eachPerson.poster_path || eachPerson.profile_path)}\r\n                                                    alt=\"Refresh Page\"\r\n                                                    className=\"object-fill h-36 w-24 rounded-md shadow-2xl shadow-black duration-150 sm:hover:rounded-none sm:hover:scale-105 sm:hover:saturate-150\"\r\n                                                    loading=\"lazy\"\r\n                                                />\r\n                                            </Button>\r\n                                        </div>\r\n                                        <p className=\"truncate sm:text-sm text-gray-400\">{eachPerson?.job || eachPerson?.name}</p>\r\n                                        <p className=\"truncate sm:text-sm\">{eachPerson.title || eachPerson?.original_name || eachPerson?.known_for_departmen}</p>\r\n\r\n                                    </div>\r\n                            )\r\n                        })}\r\n\r\n\r\n\r\n                    </Carousel>\r\n\r\n                </>\r\n            }\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default ScrollCard2\r\n"],"names":["mediaType","searchID","fetchCredits2","axios","process","data","setSecondScroll","crew","useState","secondScroll","loading","setLoading","useEffect","setTimeout","console","log","uniqueSecondScroll","Map","map","m","name","values","className","length","additionalTransfrom","arrows","autoPlay","centerMode","draggable","focusOnSelect","infinite","itemClass","minimumTouchDrag","pauseOnHover","renderArrowsWhenDisabled","renderButtonGroupOutside","renderDotsOutside","responsive","rewind","rewindWithAnimation","rtl","shouldResetAutoplay","showDots","sliderClass","slidesToSlide","swipeable","transitionDuration","eachPerson","poster_path","profile_path","media_type","id","src","halfSizeImg","alt","job","title","original_name","known_for_departmen"],"sourceRoot":""}