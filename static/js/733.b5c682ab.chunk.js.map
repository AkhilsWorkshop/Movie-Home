{"version":3,"file":"static/js/733.b5c682ab.chunk.js","mappings":"6OAsFA,UA5EoB,SAAC,GAA6B,IAA3BA,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SAExBC,EAAa,yCAAG,kGAEA,WAAdF,EAFc,gCAGSG,IAAAA,IAAA,uCAA0CH,EAA1C,YAAuDC,EAAvD,qCAA4FG,qCAHrG,gBAGNC,EAHM,EAGNA,KACRC,EAAeD,EAAKE,MAJN,wCAQSJ,IAAAA,IAAA,uCAA0CH,EAA1C,YAAuDC,EAAvD,4BAAmFG,qCAR5F,iBAQNC,EARM,EAQNA,KACRC,EAAeD,EAAKE,MATN,4CAAH,qDAanB,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBH,EAApB,KAEA,GAA8BE,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KAQA,OANAC,EAAAA,EAAAA,YAAU,WACND,GAAW,GACXT,IACAW,YAAW,WAAQF,GAAW,EAAQ,GAAE,IAC3C,GAAE,KAGC,gBAAKG,UAAU,6BAAf,SAEKL,EAAYM,OAAS,IAClB,iCACI,eAAID,UAAU,mFAAd,SAEmB,WAAdd,GAAyB,6CAAiB,0CAI/C,SAAC,IAAD,CAAiBc,UAAU,oBAAoBE,GAAG,SAAlD,gBAEKP,QAFL,IAEKA,OAFL,EAEKA,EAAaQ,KAAI,SAACC,GACf,OAA8D,OAAtDA,EAAWC,aAAeD,EAAWE,gBAGzCV,GAEI,SAAC,IAAD,IAAkBW,EAAAA,EAAAA,OAIlB,iBAAoBP,UAAU,6CAA9B,WACI,gBAAKA,UAAU,uCAAf,UACI,SAAC,IAAD,CAAQQ,WAAYJ,EAAWI,YAAc,SAAUN,GAAIE,EAAWF,GAAtE,UACI,gBACIO,IAAKC,EAAAA,IAAeN,EAAWC,aAAeD,EAAWE,cACzDK,IAAI,eACJX,UAAU,iIACVJ,QAAQ,cAIpB,cAAGI,UAAU,oCAAb,SAA4D,OAAVI,QAAU,IAAVA,GAAAA,EAAYQ,UAAYR,EAAWQ,UAAY,aACjG,cAAGZ,UAAU,sBAAb,SAAqCI,EAAWS,OAAWT,EAAWU,eAAmBV,EAAWW,UAZ9FR,EAAAA,EAAAA,MAiBrB,UASxB,C","sources":["components/Cards/DetailedCard/ScrollCard1.jsx"],"sourcesContent":["import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { halfSizeImg, responsive } from '../../../config/config'\r\nimport LScrollCard from '../../LazyLoading/LScrollCard'\r\nimport Button from '../../Sub/Button'\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\r\nimport ScrollContainer from 'react-indiana-drag-scroll'\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { AiFillRightCircle } from 'react-icons/ai'\r\n\r\nconst ScrollCard1 = ({ mediaType, searchID }) => {\r\n\r\n    const fetchCredits1 = async () => {\r\n\r\n        if (mediaType === \"person\") {\r\n            const { data } = await axios.get(`https://api.themoviedb.org/3/${mediaType}/${searchID}/combined_credits?api_key=${process.env.REACT_APP_API_KEY}`)\r\n            setFirstScroll(data.cast)\r\n        }\r\n\r\n        else {\r\n            const { data } = await axios.get(`https://api.themoviedb.org/3/${mediaType}/${searchID}/credits?api_key=${process.env.REACT_APP_API_KEY}`)\r\n            setFirstScroll(data.cast)\r\n        }\r\n    }\r\n\r\n    const [firstScroll, setFirstScroll] = useState([]);\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        fetchCredits1()\r\n        setTimeout(() => { setLoading(false) }, 1000)\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"flex flex-col gap-5 w-full\">\r\n\r\n            {firstScroll.length > 0 &&\r\n                <>\r\n                    <h1 className=\"border-l-4 pl-2 border-yellow-500 text-slate-400 text-sm font-semibold uppercase\">\r\n\r\n                        {mediaType === \"person\" ? <>Known for</> : <>Cast</>}\r\n\r\n                    </h1>\r\n\r\n                    <ScrollContainer className=\"flex gap-3 w-full\" id=\"scroll\">\r\n\r\n                        {firstScroll?.map((eachPerson) => {\r\n                            return (eachPerson.poster_path || eachPerson.profile_path) != null && (\r\n\r\n\r\n                                loading ?\r\n\r\n                                    <LScrollCard key={uuidv4()} />\r\n\r\n                                    :\r\n\r\n                                    <div key={uuidv4()} className=\"flex flex-col h-auto w-24 rounded-md gap-2\">\r\n                                        <div className=\"h-36 w-24 rounded-md overflow-hidden\">\r\n                                            <Button media_type={eachPerson.media_type || \"person\"} id={eachPerson.id}>\r\n                                                <img\r\n                                                    src={halfSizeImg + (eachPerson.poster_path || eachPerson.profile_path)}\r\n                                                    alt=\"Refresh Page\"\r\n                                                    className=\"object-fill h-36 rounded-md shadow-lg shadow-black duration-150 sm:hover:rounded-none sm:hover:scale-105 sm:hover:saturate-150\"\r\n                                                    loading=\"lazy\"\r\n                                                />\r\n                                            </Button>\r\n                                        </div>\r\n                                        <p className=\"truncate sm:text-sm text-gray-400\">{eachPerson?.character ? eachPerson.character : \"Unknown\"}</p>\r\n                                        <p className=\"truncate sm:text-xs\">{(eachPerson.title) || (eachPerson.original_name) || (eachPerson.name)}</p>\r\n\r\n                                    </div>\r\n\r\n                            )\r\n                        })}\r\n\r\n\r\n\r\n                    </ScrollContainer>\r\n                </>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ScrollCard1"],"names":["mediaType","searchID","fetchCredits1","axios","process","data","setFirstScroll","cast","useState","firstScroll","loading","setLoading","useEffect","setTimeout","className","length","id","map","eachPerson","poster_path","profile_path","uuidv4","media_type","src","halfSizeImg","alt","character","title","original_name","name"],"sourceRoot":""}